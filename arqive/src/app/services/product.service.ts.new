import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { Observable, of, throwError } from 'rxjs';
import { catchError, retry } from 'rxjs/operators';

// Produkt-Interface
export interface Product {
  id: number;
  name: string;
  description: string;
  price: number;
  imageUrl: string;
  category: string;
  color?: string;
  size?: string;
  stock?: number;
}

// Datenbank-Status-Interface
export interface DatabaseStatus {
  connected: boolean;
  error: string | null;
}

@Injectable({
  providedIn: 'root',
})
export class ProductService {
  // Basis-URL für die API
  private baseUrl = 'http://localhost';
  private defaultPort = 3000;
  private apiEndpoint = '/api/products';
  private categoryEndpoint = '/api/category';
  private statusEndpoint = '/api/status';
  private currentPort: number;
  
  // Für Diagnose und UI-Feedback
  private _isConnected: boolean = false;
  private _connectionError: string | null = null;

  constructor(private http: HttpClient) {
    // Starte mit dem Standard-Port
    this.currentPort = this.defaultPort;
    // Prüfe den Datenbank-Status beim Starten
    this.checkDatabaseStatus().subscribe();
  }

  // Getter für den Verbindungsstatus
  get isConnected(): boolean {
    return this._isConnected;
  }

  // Getter für den Verbindungsfehler
  get connectionError(): string | null {
    return this._connectionError;
  }

  // Hilfsmethode, um die aktuelle API-URL zu erhalten
  private getApiUrl(): string {
    return `${this.baseUrl}:${this.currentPort}${this.apiEndpoint}`;
  }

  // Hilfsmethode, um die Kategorie-URL zu erhalten
  private getCategoryUrl(category: string): string {
    return `${this.baseUrl}:${this.currentPort}${this.categoryEndpoint}/${category}`;
  }
  
  // Hilfsmethode, um die Status-URL zu erhalten
  private getStatusUrl(): string {
    return `${this.baseUrl}:${this.currentPort}${this.statusEndpoint}`;
  }

  // Allgemeine Fehlerbehandlung
  private handleError(error: HttpErrorResponse) {
    let errorMessage = 'Ein unbekannter Fehler ist aufgetreten.';
    
    if (error.error instanceof ErrorEvent) {
      // Client-seitiger Fehler
      errorMessage = `Fehler: ${error.error.message}`;
    } else {
      // Server-seitiger Fehler
      errorMessage = `Status: ${error.status}, Nachricht: ${error.message}`;
      if (error.error?.message) {
        errorMessage += `, Details: ${error.error.message}`;
      }
    }
    
    console.error(errorMessage);
    return throwError(() => new Error(errorMessage));
  }

  // Methode zum Prüfen des Datenbank-Status
  checkDatabaseStatus(): Observable<DatabaseStatus> {
    return this.http.get<DatabaseStatus>(this.getStatusUrl())
      .pipe(
        retry(1),
        catchError(this.handleError),
        catchError(() => {
          this._isConnected = false;
          this._connectionError = 'Konnte keine Verbindung zum Server herstellen';
          return of({ connected: false, error: this._connectionError });
        })
      );
  }

  // Methode zum Abrufen aller Produkte
  getProducts(): Observable<Product[]> {
    return this.http.get<Product[]>(this.getApiUrl())
      .pipe(
        retry(1),
        catchError(this.handleError)
      );
  }

  // Methode zum Abrufen eines einzelnen Produkts nach ID
  getProductById(id: number): Observable<Product> {
    return this.http.get<Product>(`${this.getApiUrl()}/${id}`)
      .pipe(
        retry(1),
        catchError(this.handleError)
      );
  }

  // Methode zum Abrufen von Produkten nach Kategorie
  getProductsByCategory(category: string): Observable<Product[]> {
    return this.http.get<Product[]>(this.getCategoryUrl(category))
      .pipe(
        retry(1),
        catchError(this.handleError)
      );
  }
}
